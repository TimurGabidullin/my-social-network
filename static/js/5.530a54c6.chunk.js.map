{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"names":["module","exports","TextArea","input","meta","props","hasError","touched","error","className","styles","formControl","required","value","maxLengthCreator","maxLength","length","DialogItem","s","dialog","active","to","id","name","Message","message","maxLength50","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","placeholder","validate","Dialogs","state","dialogsPage","sendMessage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","newMessageBody","compose","connect","dispatch","sendMessageActionCreator","Component","isAuth","auth","restProps"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,uHCSrKC,EAA6C,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAC7EC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,sBAAKC,UAAWC,IAAOC,YAAc,KAAOL,EAAWI,IAAOF,MAAQ,IAAtE,UACI,8BACI,gEAAcL,GAAWC,GAAUC,MAEtCC,GAAY,+BAAOF,EAAKI,a,oBChBrCR,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCD3H,oEAAO,IAAMW,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,4FCU5BE,EAN0B,SAACZ,GACtC,OAAO,qBAAKI,UAAWS,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAASC,GAAE,mBAAchB,EAAMiB,IAA/B,SAAsCjB,EAAMkB,UCGrCC,EANwB,SAACnB,GACpC,OACI,qBAAKI,UAAWS,IAAEO,QAAlB,SAA4BpB,EAAMoB,W,oCCoCpCC,EAAYZ,YAAiB,IAsB7Ba,EAAoBC,YAAwB,CAACC,KAAK,wBAA9BD,EApBuC,SAACvB,GAAW,IAElEyB,EAAgBzB,EAAhByB,aAEP,OACI,uBAAMC,SAAUD,EAAhB,UACI,8BACI,cAACE,EAAA,EAAD,CAAOC,UAAW/B,IACXqB,KAAM,iBACNW,YAAa,qBACbC,SAAU,CAACvB,IAASc,OAG/B,8BACI,kDAQDU,EAvD6B,SAAC/B,GAEzC,IAAIgC,EAAQhC,EAAMiC,YACZC,EAAgBlC,EAAhBkC,YAEFC,EAAkBH,EAAMI,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBrB,GAAIqB,EAAErB,GAAIC,KAAMoB,EAAEpB,MAAxBoB,EAAErB,OAC5DsB,EAAmBP,EAAMQ,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBxB,GAAIwB,EAAExB,GAAIG,QAASqB,EAAErB,SAA3BqB,EAAExB,OAO/D,OACI,sBAAKb,UAAWS,IAAEuB,QAAlB,UACI,qBAAKhC,UAAWS,IAAE6B,aAAlB,SACKP,IAEL,sBAAK/B,UAAWS,IAAE2B,SAAlB,UACI,8BAAMD,IACN,cAACjB,EAAD,CAAqBI,SAXb,SAACiB,GACjBT,EAAYS,EAAOC,0B,uCCQZC,sBACXC,aAfoB,SAACd,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACc,GACxB,MAAO,CACHb,YAAa,SAACU,GACVG,EAASC,YAAyBJ,UCpBvC,SAA6BK,GAchC,OAFqCH,aAJJ,SAACd,GAAD,MAAwD,CACrFkB,OAAQlB,EAAMmB,KAAKD,UAGcJ,EAVX,SAAC9C,GAAyC,IAC5DkD,EAAqBlD,EAArBkD,OAAUE,EADiD,YACtCpD,EADsC,YAE/D,OAAKkD,EACE,cAACD,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUpC,GAAI,gBDqB3B6B,CAGbd","file":"static/js/5.530a54c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Q5QI\",\"dialogsItems\":\"Dialogs_dialogsItems__3Rfrg\",\"active\":\"Dialogs_active__10kMZ\",\"messages\":\"Dialogs_messages__3nfqK\",\"message\":\"Dialogs_message__1gaPl\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\ntype TextAreaInputPropsType = {\r\n    input: any\r\n    meta: any\r\n}\r\n\r\nexport const TextArea: React.FC<TextAreaInputPropsType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...meta} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<TextAreaInputPropsType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <input {...input} {...meta} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3vv6I\",\"error\":\"FormsControls_error__3larS\",\"formSummaryError\":\"FormsControls_formSummaryError__9Xn4F\"};","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `max length is ${maxLength} symbols`\r\n    return undefined\r\n}","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DialogItem: React.FC<DialogType> = (props) => {\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nexport type DialogsPropsType = {\r\n    dialogsPage: InitialStateType\r\n    isAuth: boolean\r\n    sendMessage: (newMessageBody:string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n    let { sendMessage,} = props\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n\r\n\r\n    const addNewMessage=(values:FormDataType)=>{\r\n        sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype FormDataType = {\r\n    newMessageBody:string\r\n}\r\n\r\nconst maxLength50=maxLengthCreator(50)\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    const {handleSubmit} = props\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required,maxLength50]}/>\r\n\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux=reduxForm<FormDataType>({form:'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {\r\n    InitialStateType,\r\n    sendMessageActionCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody:string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs) as React.FC\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsForRedirectType) => {\r\n       let {isAuth,...restProps}=props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsForRedirectType => ({\r\n        isAuth: state.auth.isAuth,\r\n    })\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n"],"sourceRoot":""}