{"version":3,"sources":["redux/auth-reducer.ts","redux/app-reducer.ts","App.tsx","reportWebVitals.ts","redux/sidebar-reducer.ts","redux/users-reducer.ts","redux/redux-store.tsx","index.tsx","assets/images/Spinner-1s-200px.svg","components/common/Preloader/Preloader.tsx","redux/profile-reducer.ts","redux/dialogs-reducer.ts","api/api.ts"],"names":["SET_USER_DATA","initialState","id","email","login","isAuth","setAuthUserData","type","payload","getAuthUserData","dispatch","a","authAPI","me","response","data","resultCode","authReducer","state","action","INITIALIZED_SUCCESS","initialized","appReducer","App","this","props","initializeApp","className","fallback","Preloader","React","Component","compose","withRouter","connect","app","promise","Promise","all","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","map","u","userId","followed","filter","reducers","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","sidebar","usersPage","auth","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","src","preloader","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","posts","message","likesCount","profile","status","addPostActionCreator","newPostText","setStatus","getUserProfile","usersAPI","getProfile","getStatus","profileAPI","updateStatus","p","postId","SEND_MESSAGE","dialogs","name","messages","sendMessageActionCreator","newMessageBody","instance","axios","create","baseURL","withCredentials","headers","getUsers","get","unfollow","delete","follow","post","console","warn","put","password","rememberMe","logout"],"mappings":"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","file":"static/js/main.0e70ea55.chunk.js","sourcesContent":["import {ActionsType} from \"./redux-store\";\r\nimport {AnyAction, Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"samurai-network/auth/SET_USER_DATA\"\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    id: null as string | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n}\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const setAuthUserData = (id: string | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n    {\r\n        type: SET_USER_DATA,\r\n        payload: {\r\n            id,\r\n            email,\r\n            login,\r\n            isAuth,\r\n        },\r\n    } as const\r\n)\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data\r\n        dispatch(setAuthUserData(id, login, email, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: Dispatch<any>) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n        dispatch(stopSubmit('login', {_error: message}))\r\n    }\r\n}\r\n\r\nexport const logout = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer","import {ActionsType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\"\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    initialized: false as boolean,\r\n}\r\n\r\nconst appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const initializedSuccess = () => (\r\n    {\r\n        type: INITIALIZED_SUCCESS,\r\n    } as const\r\n)\r\n\r\nexport const initializeApp = () => {\r\n    return (dispatch: Dispatch<any>) => {\r\n        let promise = dispatch<any>(getAuthUserData())\r\n        Promise.all([promise]).then(() => {\r\n                dispatch(initializedSuccess())\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport default appReducer","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport {Route, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\n\r\n\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    initializeApp:()=>void\r\n}\r\n\r\n\r\nclass App extends React.Component<MapDispatchToPropsType&MapStatePropsType&RouteComponentProps<any>> {\r\n\r\n\r\n    componentDidMount()\r\n    {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        if(!this.props.initialized){\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"app-wrapper\">\r\n                {/*<HeaderContainer/>*/}\r\n                {/*<Navbar/>*/}\r\n                <div className={'app-wrapper-content'}>\r\n                    <h1>tyyuufffffffffffff</h1>\r\n                    <Suspense fallback={<Preloader/>}>\r\n                    {/*<Route path='/dialogs' render={() => <DialogsContainer/>}/>*/}\r\n                    {/*<Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>*/}\r\n                    {/*<Route path='/users' render={() => <UsersContainer/>}/>*/}\r\n                    {/*<Route path='/login' render={() => <LoginPage/>}/>*/}\r\n                    </Suspense>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<React.FC>(\r\n    withRouter,\r\n    connect(mapStateToProps,{initializeApp}))(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport {ActionsType} from \"./redux-store\";\r\n\r\nexport type InitialStateType=typeof initialState\r\n\r\nlet initialState = {}\r\n\r\nconst sidebarReducer = (state:InitialStateType = initialState, action: ActionsType):InitialStateType => {\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer","import {ActionsType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {AxiosResponse} from \"axios\";\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SET_USERS = \"SET_USERS\"\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\nexport type UserType = {\r\n    id: string\r\n    photos: { small: string, large: string }\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: { city: string, country: string }\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as string[] | [],\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const followSuccess = (userId: string) => (\r\n    {\r\n        type: FOLLOW,\r\n        userId\r\n    } as const\r\n)\r\n\r\nexport const unfollowSuccess = (userId: string) => (\r\n    {\r\n        type: UNFOLLOW,\r\n        userId\r\n    } as const\r\n)\r\n\r\nexport const setUsers = (users: UserType[]) => (\r\n    {\r\n        type: SET_USERS,\r\n        users\r\n    } as const\r\n)\r\n\r\nexport const setCurrentPage = (currentPage: number) => (\r\n    {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const\r\n)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => (\r\n    {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        totalUsersCount\r\n    } as const\r\n)\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => (\r\n    {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n)\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: string) => (\r\n    {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId,\r\n    } as const\r\n)\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => async (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n    let data = await usersAPI.getUsers(page, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\nconst followUnfollowFlow=async (dispatch:Dispatch,userId:string,apiMethod: any,actionCreator:any)=>{\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: string) => async (dispatch: Dispatch) => {\r\n    followUnfollowFlow(dispatch,userId,usersAPI.follow.bind(usersAPI),followSuccess)\r\n}\r\n\r\nexport const unfollow = (userId: string) => async (dispatch: Dispatch) => {\r\n    followUnfollowFlow(dispatch,userId,usersAPI.unfollow.bind(usersAPI),unfollowSuccess)\r\n}\r\n\r\nexport default usersReducer\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore,compose} from \"redux\";\r\nimport profileReducer, {\r\n    addPostActionCreator, deletePost,\r\n    setStatus,\r\n    setUserProfile,\r\n} from \"./profile-reducer\";\r\nimport dialogsReducer, {sendMessageActionCreator} from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer, {\r\n    followSuccess,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowingProgress,\r\n    toggleIsFetching,\r\n    unfollowSuccess\r\n} from \"./users-reducer\";\r\nimport authReducer, {setAuthUserData} from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer, {initializedSuccess} from \"./app-reducer\";\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app:appReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\n\r\n const composeEnhancers =(window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n const store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type ActionsType = ReturnType<typeof addPostActionCreator>\r\n    | ReturnType<typeof sendMessageActionCreator>\r\n    | ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof initializedSuccess>\r\n    | ReturnType<typeof deletePost>\r\n\r\n\r\n// export type StoreType = {\r\n//     subscribe: (observer: () => void) => void\r\n//     getState: () => AppStateType\r\n//     dispatch: (action: ActionsType) => void\r\n// }\r\nexport type StoreType = typeof store\r\n\r\n\r\n// @ts-ignore\r\n// store=window.store\r\n\r\nexport default store","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export default __webpack_public_path__ + \"static/media/Spinner-1s-200px.662afe46.svg\";","import preloader from \"../../../assets/images/Spinner-1s-200px.svg\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = () => {\r\n\r\n    return <img src={preloader}/>\r\n\r\n}\r\n\r\nexport default Preloader","import {ActionsType} from \"./redux-store\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\nconst DELETE_POST = 'DELETE_POST'\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string,\r\n        vk: string,\r\n        facebook: string,\r\n        instagram: string,\r\n        twitter: string,\r\n        website: string,\r\n        youtube: string,\r\n        mainLink: string,\r\n    }\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n} | null\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: `It's my first post`, likesCount: 11}\r\n    ],\r\n    profile: null as ProfileType,\r\n    status: '',\r\n}\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            return {\r\n                ...state, posts: [...state.posts, {\r\n                    id: 3,\r\n                    message: action.newPostText,\r\n                    likesCount: 0\r\n                }],\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => (\r\n    {\r\n        type: ADD_POST,\r\n        newPostText\r\n    } as const\r\n)\r\n\r\nexport const setUserProfile = (profile: ProfileType) => (\r\n    {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n)\r\n\r\nexport const setStatus = (status: string) => (\r\n    {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n)\r\n\r\nexport const deletePost = (postId: number) => (\r\n    {\r\n        type: DELETE_POST,\r\n        postId\r\n    } as const\r\n)\r\n\r\nexport const getUserProfile = (userId: string) => async (dispatch: Dispatch) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\n\r\nexport const getStatus = (userId: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default profileReducer\r\n\r\n\r\n","import {ActionsType} from \"./redux-store\";\r\n\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\"\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrey'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Victor'},\r\n        {id: 6, name: 'Valera'}\r\n    ] as DialogType[],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n    ] as MessageType[],\r\n}\r\n\r\nconst dialogsReducer = (state: InitialStateType = initialState, action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 4, message: action.newMessageBody}]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessageActionCreator = (newMessageBody:string) => (\r\n    {\r\n        type: SEND_MESSAGE,\r\n        newMessageBody\r\n    } as const\r\n)\r\n\r\n\r\n\r\n\r\nexport default dialogsReducer\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": 'fc9ea6e0-1fb2-438a-8945-f3bcb731cc84'\r\n    },\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(userId: string) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    follow(userId: string) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: string) {\r\n        console.warn('Obselete method. Please use profileAPI object.')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: string){\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string){\r\n        return instance.put(`profile/status/`,{status} )\r\n    },\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email:string,password:string,rememberMe:boolean=false) {\r\n        return instance.post(`auth/login`,{email,password,rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n\r\n\r\n}\r\n"],"sourceRoot":""}