{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","Preloader","Post","message","likesCount","posts","item","alt","MyPosts","React","memo","state","profilePage","addPost","postsElements","map","p","id","postsBlock","MyPostFormRedux","onSubmit","values","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","TextArea","name","validate","required","placeholder","MyPostsContainer","connect","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.2e10ea4e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__aEa0n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__28sBn\",\"posts\":\"MyPosts_posts__1IQ6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2ejwt\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true} onChange={onStatusChange} value={status}\r\n                       onBlur={deactivateEditMode}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","\r\nimport React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile:ProfileType\r\n    status:string\r\n    updateStatus:(string:string)=>void\r\n}\r\n\r\nconst ProfileInfo:React.FC<ProfileInfoPropsType> = (props) => {\r\n\r\n    const {profile,status,updateStatus,}=props\r\n\r\n    if(!profile){\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large}/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Post:React.FC<PostType> = (props) => {\r\n    const{message,likesCount}=props;\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.item}>\r\n                <img\r\n                    src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT-9wd1vdvmXNs9AobWt-l-fJi2o1CQpyJRqQ&usqp=CAU'}\r\n                    alt={''}/>\r\n                {message}\r\n                <div>\r\n                    <span>like {likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\"\r\nimport {InitialStateType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm,} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    profilePage: InitialStateType\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let state = props.profilePage\r\n    let {addPost} = props\r\n\r\n    let postsElements = state.posts.map(p => (\r\n        <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>))\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n    const addPostHandler = (values: DataFormType) => {\r\n        addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Post</h3>\r\n            <MyPostFormRedux onSubmit={addPostHandler}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype DataFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<DataFormType>> = (props) => {\r\n    const {handleSubmit} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea}\r\n                       name={'newPostText'}\r\n                       validate={[required, maxLength10]}\r\n                       placeholder={'Post message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst MyPostFormRedux = reduxForm<DataFormType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport MyPosts from \"./MyPosts\"\r\nimport {addPostActionCreator, InitialStateType,} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profilePage: InitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText:string) => void\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus:(string:string)=>void\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n\r\n    const {profile,status,updateStatus,} = props\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType, getUserProfile, getStatus, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport Dialogs from \"../Dialogs/Dialogs\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n}\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    // userId: any\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id as string,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.FC>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);"],"sourceRoot":""}