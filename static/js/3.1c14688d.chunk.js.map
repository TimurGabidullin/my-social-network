{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileData","profile","isOwner","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","contactTitle","contactValue","ProfileDataForm","Contact","className","s","contact","ProfileInfo","savePhoto","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","type","target","files","Post","message","likesCount","posts","item","alt","MyPosts","React","memo","state","profilePage","addPost","postsElements","p","id","postsBlock","MyPostFormRedux","onSubmit","values","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","TextArea","name","validate","required","placeholder","MyPostsContainer","connect","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,UAAY,+BAA+B,QAAU,+B,oBCAhID,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,4IC8CVC,EAvCkD,SAACC,GAAW,IAAD,EAExCC,oBAAS,GAF+B,mBAEjEC,EAFiE,KAEvDC,EAFuD,OAG5CF,mBAASD,EAAMI,QAH6B,mBAGjEA,EAHiE,KAGzDC,EAHyD,KAIxEC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAcV,OACI,iCACMF,GACF,gCACI,wCADJ,IACmB,sBAAMK,cAhBR,WACrBJ,GAAY,IAeW,SAAwCH,EAAMI,QAAU,WAG1EF,GACD,8BACI,uBAAOM,WAAW,EAAMC,SAjBb,SAACC,GACpBL,EAAUK,EAAEC,cAAcC,QAgBgCA,MAAOR,EAClDS,OAfQ,WACvBV,GAAY,GACZH,EAAMc,aAAaV,Y,SC2BrBW,EAA8C,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,QAAQC,EAAa,EAAbA,QAC1D,OACI,gCACKA,GAAS,8BAAK,4CACf,gCACI,2CAAkBD,EAAUA,EAAQE,SAAW,MAGnD,gCACI,mDAA0BF,EAAUA,EAAQG,eAAiB,MAAQ,KAAO,MAG5EH,GAAWA,EAAQG,gBACnB,gCACI,wDAA+BH,EAAUA,EAAQI,0BAA4B,MAGrF,gCACI,0CAAiBJ,EAAUA,EAAQK,QAAU,MAEjD,gCACI,0CACAC,OAAOC,KAAKP,EAAUA,EAAQQ,SAAW,IAAIC,KAAI,SAAAC,GAC7C,OAAO,cAAC,EAAD,CAAmBC,aAAcD,EAAKE,aAAcZ,EAAUA,EAAQQ,SAASE,GAAO,IAAxEA,aAMnCG,EAAkD,SAAC,GAAe,IAAdb,EAAa,EAAbA,QACtD,OACI,gCACI,gCACI,2CAAkBA,EAAUA,EAAQE,SAAW,MAGnD,gCACI,mDAA0BF,EAAUA,EAAQG,eAAiB,MAAQ,KAAO,MAG5EH,GAAWA,EAAQG,gBACnB,gCACI,wDAA+BH,EAAUA,EAAQI,0BAA4B,MAGrF,gCACI,0CAAiBJ,EAAUA,EAAQK,QAAU,MAEjD,gCACI,0CACAC,OAAOC,KAAKP,EAAUA,EAAQQ,SAAW,IAAIC,KAAI,SAAAC,GAC7C,OAAO,cAAC,EAAD,CAAmBC,aAAcD,EAAKE,aAAcZ,EAAUA,EAAQQ,SAASE,GAAO,IAAxEA,aAanCI,EAAsC,SAAC9B,GACzC,OAAO,sBAAK+B,UAAWC,IAAEC,QAAlB,UAA2B,8BAAIjC,EAAM2B,aAAV,OAA6B3B,EAAM4B,iBAG1DM,EAzGqC,SAAClC,GAAW,IAErDgB,EAAqDhB,EAArDgB,QAASZ,EAA4CJ,EAA5CI,OAAQU,EAAoCd,EAApCc,aAAcG,EAAsBjB,EAAtBiB,QAASkB,EAAanC,EAAbmC,UAFY,EAI3BlC,oBAAS,GAJkB,mBAIpDC,EAJoD,UAO3D,IAAKc,EACD,OAAO,cAACoB,EAAA,EAAD,IASX,OACI,8BACI,sBAAKL,UAAWC,IAAEK,iBAAlB,UACI,qBAAKC,IAAKtB,EAAQuB,OAAOC,OAASC,IAAWV,UAAWC,IAAEU,YACzDzB,GAAW,uBAAO0B,KAAM,OAAQlC,SAVjB,SAACC,GACrBA,EAAEkC,OAAOC,OACTV,EAAUzB,EAAEkC,OAAOC,MAAM,OAUpB3C,EAAW,cAAC,EAAD,CAAiBc,QAASA,IAAa,cAAC,EAAD,CAAaA,QAASA,EAASC,QAASA,IAE3F,cAAC,EAAD,CAAwBb,OAAQA,EAAQU,aAAcA,U,oCCbvDgC,EAlBiB,SAAC9C,GAAW,IAClC+C,EAAoB/C,EAApB+C,QAAQC,EAAYhD,EAAZgD,WACd,OACI,qBAAKjB,UAAWC,IAAEiB,MAAlB,SACI,sBAAKlB,UAAWC,IAAEkB,KAAlB,UACI,qBACIZ,IAAK,sGACLa,IAAK,KACRJ,EACD,8BACI,yCAAYC,a,kCCL1BI,EAAUC,IAAMC,MAAK,SAACtD,GAExB,IAAIuD,EAAQvD,EAAMwD,YACbC,EAAWzD,EAAXyD,QAEDC,EAAgBH,EAAMN,MAAMxB,KAAI,SAAAkC,GAAC,OACjC,cAAC,EAAD,CAAiBC,GAAID,EAAEC,GAAIb,QAASY,EAAEZ,QAASC,WAAYW,EAAEX,YAAlDW,EAAEC,OAOjB,OACI,sBAAK7B,UAAWC,IAAE6B,WAAlB,UACI,yCACA,cAACC,EAAD,CAAiBC,SAPF,SAACC,GACpBP,EAAQO,EAAOC,gBAOX,qBAAKlC,UAAWC,IAAEiB,MAAlB,SACKS,UAUXQ,EAAcC,YAAiB,IAoB/BL,EAAkBM,YAAwB,CAACC,KAAM,yBAA/BD,EAlB0C,SAACpE,GAAW,IACnEsE,EAAgBtE,EAAhBsE,aACP,OACI,uBAAMP,SAAUO,EAAhB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,KAAM,cACNC,SAAU,CAACC,IAAUV,GACrBW,YAAa,mBAExB,8BACI,sDAUDzB,I,gBC7BA0B,EAHQC,aAdC,SAACxB,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACwB,GACxB,MAAO,CACHvB,QAAS,SAACQ,GACNe,EAASC,YAAqBhB,QAKnBc,CAA4C3B,GCNpD8B,EAb6B,SAAClF,GAAW,IAE7CgB,EAAiDhB,EAAjDgB,QAAQZ,EAAyCJ,EAAzCI,OAAOU,EAAkCd,EAAlCc,aAAaG,EAAqBjB,EAArBiB,QAAQkB,EAAanC,EAAbmC,UAG3C,OACI,gCACI,cAAC,EAAD,CAAanB,QAASA,EAASC,QAASA,EAASb,OAAQA,EAAQU,aAAcA,EAAcqB,UAAWA,IACxG,cAAC,EAAD,Q,gBCONgD,E,oKAEF,WACI,IAAIC,EAASC,KAAKrF,MAAMsF,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKrF,MAAMwF,mBAEhBH,KAAKrF,MAAMyF,QAAQC,KAAK,UAGhCL,KAAKrF,MAAM2F,eAAeP,GAC1BC,KAAKrF,MAAM4F,UAAUR,K,+BAGzB,WACIC,KAAKQ,mB,gCAGT,SAAmBC,EAAgDC,GAC3DV,KAAKrF,MAAMsF,MAAMC,OAAOH,SAAWU,EAAUR,MAAMC,OAAOH,QAC1DC,KAAKQ,mB,oBAKb,WAEI,OACI,8BACI,cAAC,EAAD,2BAAaR,KAAKrF,OAAlB,IACSiB,SAAUoE,KAAKrF,MAAMsF,MAAMC,OAAOH,OAClCpE,QAASqE,KAAKrF,MAAMgB,QACpBZ,OAAQiF,KAAKrF,MAAMI,OACnBU,aAAcuE,KAAKrF,MAAMc,aACzBqB,UAAWkD,KAAKrF,MAAMmC,mB,GAlChBkB,IAAM2C,WAkDtBC,sBACXlB,aARkB,SAACxB,GAAD,MAA6C,CAC/DvC,QAASuC,EAAMC,YAAYxC,QAC3BZ,OAAQmD,EAAMC,YAAYpD,OAC1BoF,iBAAkBjC,EAAM2C,KAAKtC,GAC7BuC,OAAQ5C,EAAM2C,KAAKC,UAIM,CAACR,mBAAgBC,cAAW9E,iBAAcqB,gBACnEiE,IAFWH,CAIbd","file":"static/js/3.1c14688d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__aEa0n\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1f9Cz\",\"contact\":\"ProfileInfo_contact__cEHKe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__28sBn\",\"posts\":\"MyPosts_posts__1IQ6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2ejwt\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true} onChange={onStatusChange} value={status}\r\n                       onBlur={deactivateEditMode}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (string: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\r\n\r\n    const {profile, status, updateStatus, isOwner, savePhoto} = props\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode ? <ProfileDataForm profile={profile}/> : <ProfileData profile={profile} isOwner={isOwner}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile,isOwner}) => {\r\n    return (\r\n        <div>\r\n            {isOwner&&<div><button>Edit</button></div>}\r\n            <div>\r\n                <b>Full name:</b>{profile ? profile.fullName : ''}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job:</b>{profile ? profile.lookingForAJob ? 'yes' : 'no' : ''}\r\n            </div>\r\n            {\r\n                profile && profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills:</b>{profile ? profile.lookingForAJobDescription : ''}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me:</b>{profile ? profile.aboutMe : ''}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>{\r\n                Object.keys(profile ? profile.contacts : '').map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile ? profile.contacts[key] : ''}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst ProfileDataForm: React.FC<ProfileDataPropsType> = ({profile}) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b>Full name:</b>{profile ? profile.fullName : ''}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job:</b>{profile ? profile.lookingForAJob ? 'yes' : 'no' : ''}\r\n            </div>\r\n            {\r\n                profile && profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills:</b>{profile ? profile.lookingForAJobDescription : ''}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me:</b>{profile ? profile.aboutMe : ''}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>{\r\n                Object.keys(profile ? profile.contacts : '').map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile ? profile.contacts[key] : ''}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = (props) => {\r\n    return <div className={s.contact}><b>{props.contactTitle}:</b>{props.contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Post:React.FC<PostType> = (props) => {\r\n    const{message,likesCount}=props;\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.item}>\r\n                <img\r\n                    src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT-9wd1vdvmXNs9AobWt-l-fJi2o1CQpyJRqQ&usqp=CAU'}\r\n                    alt={''}/>\r\n                {message}\r\n                <div>\r\n                    <span>like {likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\"\r\nimport {InitialStateType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm,} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    profilePage: InitialStateType\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let state = props.profilePage\r\n    let {addPost} = props\r\n\r\n    let postsElements = state.posts.map(p => (\r\n        <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>))\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n    const addPostHandler = (values: DataFormType) => {\r\n        addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Post</h3>\r\n            <MyPostFormRedux onSubmit={addPostHandler}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype DataFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<DataFormType>> = (props) => {\r\n    const {handleSubmit} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea}\r\n                       name={'newPostText'}\r\n                       validate={[required, maxLength10]}\r\n                       placeholder={'Post message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst MyPostFormRedux = reduxForm<DataFormType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport MyPosts from \"./MyPosts\"\r\nimport {addPostActionCreator, InitialStateType,} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profilePage: InitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText:string) => void\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus:(string:string)=>void\r\n    savePhoto: (photo: File) => void\r\n    isOwner:boolean\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n\r\n    const {profile,status,updateStatus,isOwner,savePhoto} = props\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} isOwner={isOwner} status={status} updateStatus={updateStatus} savePhoto={savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType, getUserProfile, getStatus, updateStatus, savePhoto} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id as string,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.FC>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);"],"sourceRoot":""}