{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["TextArea","input","meta","props","hasError","touched","error","className","styles","formControl","required","value","maxLengthCreator","maxLength","length","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","onBlur","updateStatus","ProfileDataForm","profile","dispatch","useDispatch","useForm","defaultValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","github","vk","facebook","instagram","twitter","youtube","mainLink","register","setError","handleSubmit","errors","formState","onSubmit","formData","saveProfile","message","placeholder","type","Object","keys","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","Post","likesCount","posts","item","alt","MyPosts","React","memo","state","profilePage","addPost","postsElements","p","id","postsBlock","MyPostFormRedux","values","newPostText","maxLength10","reduxForm","form","Field","component","name","validate","MyPostsContainer","connect","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.f6d51454.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\ntype TextAreaInputPropsType = {\r\n    input: any\r\n    meta: any\r\n}\r\n\r\nexport const TextArea: React.FC<TextAreaInputPropsType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...meta} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<TextAreaInputPropsType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                <input {...input} {...meta} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__aEa0n\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1f9Cz\",\"contact\":\"ProfileInfo_contact__cEHKe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__28sBn\",\"posts\":\"MyPosts_posts__1IQ6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2ejwt\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true} onChange={onStatusChange} value={status}\r\n                       onBlur={deactivateEditMode}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {ProfileType, saveProfile} from \"../../redux/profile-reducer\";\r\nimport s from './ProfileInfo/ProfileInfo.module.css'\r\nimport {useForm, SubmitHandler} from \"react-hook-form\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n    setEditMode:(mode:boolean)=>void\r\n}\r\n\r\nexport type InputsType = {\r\n    fullName: string | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string | null\r\n    contacts: { [key: string]: string | null }\r\n    commonErr:string | null\r\n}\r\n\r\nconst ProfileDataForm: React.FC<ProfileDataFormPropsType> = ({profile,setEditMode}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {register,setError, handleSubmit, formState: {errors}} = useForm<InputsType>(\r\n        {\r\n            defaultValues: {\r\n                fullName: profile ? profile.fullName : '',\r\n                lookingForAJob: profile ? profile.lookingForAJob : false,\r\n                lookingForAJobDescription: profile ? profile.lookingForAJobDescription : '',\r\n                aboutMe: profile ? profile.aboutMe : '',\r\n                contacts: {\r\n                    github: profile ? profile.contacts.github : '',\r\n                    vk: profile ? profile.contacts.vk : '',\r\n                    facebook: profile ? profile.contacts.facebook : '',\r\n                    instagram: profile ? profile.contacts.instagram : '',\r\n                    twitter: profile ? profile.contacts.twitter : '',\r\n                    youtube: profile ? profile.contacts.youtube : '',\r\n                    mainLink: profile ? profile.contacts.mainLink : '',\r\n                }\r\n            }\r\n        }\r\n    )\r\n\r\n    const onSubmit: SubmitHandler<InputsType> =  (formData) => {\r\n       dispatch(saveProfile(formData,setError,setEditMode))\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n            {errors.fullName && <span>{errors.fullName.message}</span>}\r\n            {/*{errors.commonErr && <span>{errors.commonErr.message}</span>}*/}\r\n\r\n            <div>\r\n                <b>Full name:</b>\r\n                <div><input placeholder=\"Full name\" {...register(\"fullName\", {\r\n                    required: 'This field is required'\r\n\r\n                })}/></div>\r\n                {/*{errors.fullName && <span>{errors.fullName.message}</span>}*/}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job:</b>\r\n                <div><input type={'checkbox'}  {...register(\"lookingForAJob\")}/></div>\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                <div><textarea\r\n                    placeholder=\"My professional skills\" {...register(\"lookingForAJobDescription\", {\r\n                    required: 'This field is required'\r\n                })}/>\r\n                    {errors.lookingForAJobDescription && <span>{errors.lookingForAJobDescription.message}</span>}\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me:</b>\r\n                <div><textarea placeholder=\"About me\" {...register(\"aboutMe\", {\r\n                    required: 'This field is required'\r\n                })}/></div>\r\n                {errors.aboutMe && <span>{errors.aboutMe.message}</span>}\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <b>Contacts:</b>{\r\n                Object.keys(profile ? profile.contacts : '').map(key => {\r\n\r\n                    return <div className={s.contact} key={key}>\r\n                        <b>{key}:</b>\r\n                        <div>\r\n                            <input placeholder={key} {...register(`contacts.${key}`)}/>\r\n                        </div>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileDataForm","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"../ProfileDataForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (string: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\r\n\r\n    const {profile, status, updateStatus, isOwner, savePhoto} = props\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm profile={profile} setEditMode={setEditMode}/>\r\n                    : <ProfileData profile={profile}\r\n                                   isOwner={isOwner}\r\n                                   goToEditMode={() => {\r\n                                       setEditMode(true)\r\n                                   }}/>\r\n                }\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>Edit</button>\r\n            </div>}\r\n\r\n            <div>\r\n                <b>Full name:</b>{profile ? profile.fullName : ''}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job:</b>{profile ? profile.lookingForAJob ? 'yes' : 'no' : ''}\r\n            </div>\r\n            {\r\n                profile && profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills:</b>{profile ? profile.lookingForAJobDescription : ''}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me:</b>{profile ? profile.aboutMe : ''}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Contacts:</b>{\r\n                Object.keys(profile ? profile.contacts : '').map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile ? profile.contacts[key] : ''}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\nexport const Contact: React.FC<ContactPropsType> = (props) => {\r\n    return <div className={s.contact}><b>{props.contactTitle}:</b>{props.contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Post:React.FC<PostType> = (props) => {\r\n    const{message,likesCount}=props;\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.item}>\r\n                <img\r\n                    src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT-9wd1vdvmXNs9AobWt-l-fJi2o1CQpyJRqQ&usqp=CAU'}\r\n                    alt={''}/>\r\n                {message}\r\n                <div>\r\n                    <span>like {likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\"\r\nimport {InitialStateType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm,} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    profilePage: InitialStateType\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let state = props.profilePage\r\n    let {addPost} = props\r\n\r\n    let postsElements = state.posts.map(p => (\r\n        <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>))\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n    const addPostHandler = (values: DataFormType) => {\r\n        addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Post</h3>\r\n            <MyPostFormRedux onSubmit={addPostHandler}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype DataFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<DataFormType>> = (props) => {\r\n    const {handleSubmit} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea}\r\n                       name={'newPostText'}\r\n                       validate={[required, maxLength10]}\r\n                       placeholder={'Post message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst MyPostFormRedux = reduxForm<DataFormType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport MyPosts from \"./MyPosts\"\r\nimport {addPostActionCreator, InitialStateType,} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profilePage: InitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText:string) => void\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus:(string:string)=>void\r\n    savePhoto: (photo: File) => void\r\n    isOwner:boolean\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n\r\n    const {profile,status,updateStatus,isOwner,savePhoto} = props\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} isOwner={isOwner} status={status} updateStatus={updateStatus} savePhoto={savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType, getUserProfile, getStatus, updateStatus, savePhoto} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id as string,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.FC>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);"],"sourceRoot":""}